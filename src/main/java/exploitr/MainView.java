package exploitr;

import exploitr.code.FileRepo;
import exploitr.code.Login;
import exploitr.code.Notification;
import exploitr.code.Operator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

public class MainView {
    private static JFrame frame;
    private JTextField usernameTextField;
    private JPanel mainPanel;
    private JButton saveButton;
    private JButton clearDataButton;
    private JButton exitButton;
    private JCheckBox disCheck;
    private JTextField passwordTextField;
    private JButton loginout;

    private MainView() {
        setupUI(frame, loginout, usernameTextField, passwordTextField, mainPanel, saveButton, clearDataButton, exitButton, disCheck);
    }

    public static void main(String[] args) {

        FileRepo repo = FileRepo.getInstance();

        frame = new JFrame("Login-Windows Â© 2018 Pratim Majumder");
        frame.setContentPane(new MainView().mainPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();

        EventQueue.invokeLater(() -> centerPosition(frame));

        if (repo.isExistsCredentials()) {
            try {
                Login.doLogin(Operator.getUserName(repo.readFileStore()), Operator.getPasswordId(repo.readFileStore()));
            } catch (Exception e) {
                e.printStackTrace();
                Notification.showErrorNotification();
            }
        } else {
            setUIVisible();
        }

    }

    private static void centerPosition(JFrame xframe) {
        Dimension windowSize = xframe.getSize();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();

        int dx = centerPoint.x - windowSize.width / 2;
        int dy = centerPoint.y - windowSize.height / 2;
        xframe.setLocation(dx, dy);
    }

    private static void centerPosition(JDialog xdialog) {
        Dimension windowSize = xdialog.getSize();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point centerPoint = ge.getCenterPoint();

        int dx = centerPoint.x - windowSize.width / 2;
        int dy = centerPoint.y - windowSize.height / 2;
        xdialog.setLocation(dx, dy);
    }

    public static void setUIVisible() {
        frame.setVisible(true);
    }


    private static void setupUI(JFrame frame, JButton lookout, JTextField usernameTextField, JTextField passwordTextField, JPanel mainPanel,
                                JButton saveButton, JButton clearDataButton, JButton exitButton, JCheckBox disCheck) {

        FileRepo repo = FileRepo.getInstance();

        lookout.addActionListener(e -> {
            if (Login.isNetworkActual()) {
                Login.doLogout();
            } else {
                try {
                    Login.doLogin(Operator.getUserName(repo.readFileStore()), Operator.getPasswordId(repo.readFileStore()));
                } catch (IOException e1) {
                    e1.printStackTrace();
                    Notification.showErrorNotification();
                }
            }
        });

        saveButton.addActionListener(e -> {
            String username = usernameTextField.getText();
            String password = passwordTextField.getText();
            if (!disCheck.isSelected()) {
                if (isCreedsValid(username, password)) {
                    repo.writeFileStore(Operator.getXJSon(username, password).toString());
                    superDialog("Information", "Data Saved", "Ok", frame, true, new FlowLayout()).setVisible(true);
                } else {
                    superDialog("Warning", "Can't save data,check username and password", "Ok", frame, true, new FlowLayout()).setVisible(true);
                }
            } else {
                if (repo.writeFileStore(Operator.getXJSon(username, password).toString())) {
                    superDialog("Information", "Data Saved", "Ok", frame, true, new FlowLayout()).setVisible(true);
                } else {
                    superDialog("Error", "Unexpected error while saving data", "Ok", frame, true, new FlowLayout()).setVisible(true);
                }
            }
        });

        clearDataButton.addActionListener(e -> {
            if (repo.clearFileStore()) {
                superDialog("Information", "Data Cleared", "Ok", frame, true, new FlowLayout()).setVisible(true);
            } else {
                superDialog("Error", "Can't clear data.Permission Error.\n Restart Application", "Oops", frame, true, new FlowLayout()).setVisible(true);
            }
        });

        exitButton.addActionListener(e -> {
            System.exit(0);
        });
    }

    private static boolean isCreedsValid(String username, String password) {
        return username.contains("_8star") && !(password == null || password.length() == 0);
    }

    @SuppressWarnings("SameParameterValue")
    private static JDialog superDialog(String head, String tail, String userReply,
                                       JFrame frame, boolean blockUI, LayoutManager layout) {
        JDialog dialog = new JDialog(frame, head, blockUI);
        dialog.setSize(350, 100);
        dialog.setLayout(layout);
        JLabel label = new JLabel(tail);
        JButton close = new JButton(userReply);
        close.addActionListener(e -> {
            dialog.setVisible(false);
        });
        dialog.add(label);
        dialog.add(close);
        centerPosition(dialog);
        return dialog;
    }
}
