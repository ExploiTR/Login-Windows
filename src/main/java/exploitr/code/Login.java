package exploitr.code;

import okhttp3.*;

import java.io.IOException;
import java.net.InetAddress;
import java.util.concurrent.Callable;

public class Login {

    /*
     *
     * Usage: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]
     * [-r count] [-s count] [[-j host-list] | [-k host-list]]
     * [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name
     *
     * Options:
     * -t             Ping the specified host until stopped.
     *                To see statistics and continue - type Control-Break;
     *                To stop - type Control-C.
     * -a             Resolve addresses to hostnames.
     * -n count       Number of echo requests to send.
     * -l size        Send buffer size.
     * -f             Set Don't Fragment flag in packet (IPv4-only).
     * -i TTL         Time To Live.
     * -v TOS         Type Of Service (IPv4-only. This setting has been deprecated
     *                and has no effect on the type of service field in the IP Header).
     * -r count       Record route for count hops (IPv4-only).
     * -s count       Timestamp for count hops (IPv4-only).
     * -j host-list   Loose source route along host-list (IPv4-only).
     * -k host-list   Strict source route along host-list (IPv4-only).
     * -w timeout     Timeout in milliseconds to wait for each reply.
     * -R             Use routing header to test reverse route also (IPv6-only).
     * -S srcaddr     Source address to use.
     * -4             Force using IPv4.
     * -6             Force using IPv6.
     * */

    private static final String URL_LOGIN = "http://2.2.2.2/login";
    private static final String URL_LOGOUT = "http://2.2.2.2/logout";
    private static final String URL_CHECK = "https://google.com/";

    public static void doLogin(String username, String password) {

        OkHttpClient client = new OkHttpClient.Builder().build();
        RequestBody formBody = new FormBody.Builder()
                .add("username", username)
                .add("password", password)
                .build();

        Request.Builder builder = new Request.Builder()
                .url(URL_LOGIN)
                .post(formBody);
        Request request = builder.build();

        Response response = null;
        try {
            response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                Notification.showInformationNotification();
            } else {
                Notification.showWarningNotification();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (response != null) {
            response.close();
        }

    }

    public static void doLogout() {
        OkHttpClient client = new OkHttpClient.Builder().build();

        Request.Builder builder = new Request.Builder()
                .url(URL_LOGOUT).get();
        Request request = builder.build();

        Response response;
        try {
            response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                response.close();
                Notification.showLogoutSuccessNotification();
            } else {
                Notification.showLogoutFailedNotification();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static boolean isNetworkActual() {
        return new DiscoverRunnable().call();
    }

    public static class DiscoverRunnable implements Callable<Boolean> {

        @Override
        public Boolean call() {
            OkHttpClient client = new OkHttpClient.Builder().build();
            Request.Builder builder = new Request.Builder()
                    .url(URL_CHECK).get();
            Request request = builder.build();
            Response response;
            try {
                response = client.newCall(request).execute();
                return response.isSuccessful();
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
    }
}
