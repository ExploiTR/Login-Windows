package exploitr.code;

import org.apache.commons.io.IOUtils;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;


/*
* TODO use java.nio.files and java.nio.files.Path
* */

public class FileRepo {

    private static final String XPATH = getXpath();
    private static final String ENCODING = "ASCII";

    private FileRepo() {
    }

    public static FileRepo getInstance() {
        return new FileRepo();
    }

    private static String getXpath() {
        return System.getProperty("user.home") + "\\AppData\\Local\\Service";
    }


    @Contract(pure = true)
    @NotNull
    private String getActualStoreFilePath() {
        return XPATH + "\\credStore.txt";
    }


    private boolean createFileStore() {
        return new File(XPATH).mkdir();
    }


    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
    private boolean isExistsFile() {
        File file = new File(getActualStoreFilePath());
        return file.exists();
    }

    public boolean isExistsCredentials() {
        if (!isExistsFile()) {
            return false;
        }
        try {
            return Operator.getUserName(readFileStore()) != null && Operator.getPasswordId(readFileStore()) != null;
        } catch (Exception e) {
            return false;
        }
    }

    public String readFileStore() throws IOException {
        return IOUtils.toString(new FileInputStream(getActualStoreFilePath()), ENCODING);
    }

    public boolean writeFileStore(String what) {
        boolean x, y = false;
        if (!isExistsFile()) {
            x = createFileStore();
        } else {
            x = true;
        }
        try {
            IOUtils.write(what, new FileOutputStream(new File(getActualStoreFilePath())), ENCODING);
            y = true;
        } catch (IOException e) {
            clearFileStore();
            e.printStackTrace();
        }
        return x && y;
    }

    public boolean clearFileStore() {
        return new File(getActualStoreFilePath()).delete();
    }
}
